use CoreFoundation_sys;

// utility function - step thru variable length midi packets

#[cfg(any(target_arch = "powerpc", target_arch = "x86_64", target_arch = "x86"))]
pub unsafe fn MIDIPacketNext(pkt: &MIDIPacket) -> &MIDIPacket
{
    use std::intrinsics::transmute;
	transmute(&(*pkt).data[(*pkt).length as usize])
}

#[cfg(any(target_arch = "arm", target_arch = "aarch64"))]
pub unsafe fn MIDIPacketNext(pkt: &MIDIPacket) -> &MIDIPacket
{
	// MIDIPacket must be 4-byte aligned
    use std::intrinsics::transmute;
    ((transmute::<_, usize>(&(*pkt).data[(*pkt).length as usize]) + 3) & !3) as *const MIDIPacket
}



/* automatically generated by rust-bindgen */


pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __darwin_intptr_t = ::libc::c_long;
pub type __darwin_natural_t = ::libc::c_uint;
pub type __darwin_ct_rune_t = ::libc::c_int;
pub type __darwin_ptrdiff_t = ::libc::c_long;
pub type __darwin_size_t = ::libc::c_ulong;
pub type __darwin_wchar_t = ::libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::libc::c_int;
pub type __darwin_clock_t = ::libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::libc::c_long;
pub type __darwin_time_t = ::libc::c_long;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_longlong;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulonglong;
pub type register_t = int64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = ::libc::c_ulong;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::libc::c_uint;
pub type __darwin_fsfilcnt_t = ::libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::libc::c_char; 37usize];

pub type __darwin_pthread_key_t = ::libc::c_ulong;
pub type u_char = ::libc::c_uchar;
pub type u_short = ::libc::c_ushort;
pub type u_int = ::libc::c_uint;
pub type u_long = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::libc::c_char;
pub type daddr_t = int32_t;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type size_t = __darwin_size_t;
pub type ssize_t = __darwin_ssize_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::libc::c_int;

pub type fd_mask = __int32_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type __darwin_nl_item = ::libc::c_int;
pub type __darwin_wctrans_t = ::libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;

pub type float_t = ::libc::c_float;
pub type double_t = ::libc::c_double;

pub type sigset_t = __darwin_sigset_t;

pub type ptrdiff_t = __darwin_ptrdiff_t;
pub type max_align_t = ::libc::c_double;
pub type fpos_t = __darwin_off_t;

pub type Enum_Unnamed6 = ::libc::c_uint;

pub type idtype_t = Enum_Unnamed6;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;

pub type UInt8 = ::libc::c_uchar;
pub type SInt8 = ::libc::c_char;
pub type UInt16 = ::libc::c_ushort;
pub type SInt16 = ::libc::c_short;
pub type UInt32 = ::libc::c_uint;
pub type SInt32 = ::libc::c_int;
pub type SInt64 = ::libc::c_longlong;
pub type UInt64 = ::libc::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::libc::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = ::libc::c_float;
pub type Float64 = ::libc::c_double;
pub type Ptr = *mut ::libc::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::libc::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type ItemCount = ::libc::c_ulong;
pub type Boolean = ::libc::c_uchar;

pub type Byte = UInt8;

pub type MIDIObjectRef = UInt32;
pub type MIDIClientRef = MIDIObjectRef;
pub type MIDIPortRef = MIDIObjectRef;
pub type MIDIDeviceRef = MIDIObjectRef;
pub type MIDIEntityRef = MIDIObjectRef;
pub type MIDIEndpointRef = MIDIObjectRef;
pub type MIDITimeStamp = UInt64;
pub type MIDIObjectType = SInt32;
pub type Enum_Unnamed148 = ::libc::c_int;
pub type MIDIUniqueID = SInt32;
pub type Enum_Unnamed149 = ::libc::c_uint;
pub type MIDIPacketList = Struct_MIDIPacketList;
pub type MIDINotifyProc =
    ::std::option::Option<extern "C" fn(message: ::libc::c_void,
                                        refCon: ::libc::c_void) -> ()>;
pub type MIDINotifyBlock = ::libc::c_void;
pub type MIDIReadProc =
    ::std::option::Option<extern "C" fn(pktlist: *const MIDIPacketList,
                                        readProcRefCon: *mut ::libc::c_void,
                                        srcConnRefCon: *mut ::libc::c_void) -> ()>;
pub type MIDIReadBlock = ::libc::c_void;
pub type MIDICompletionProc =
    ::std::option::Option<extern "C" fn(request: ::libc::c_void) -> ()>;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_MIDIPacket {
    pub timeStamp: MIDITimeStamp,
    pub length: UInt16,
    pub data: [Byte; 256usize],
}
impl ::std::clone::Clone for Struct_MIDIPacket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIPacket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIPacket = Struct_MIDIPacket;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_MIDIPacketList {
    pub numPackets: UInt32,
    pub packet: [MIDIPacket; 1usize],
}
impl ::std::clone::Clone for Struct_MIDIPacketList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIPacketList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "CoreMIDI", kind = "framework")]
extern "C" {
    pub fn MIDIClientCreate(name: CoreFoundation_sys::CFStringRef, notifyProc: MIDINotifyProc,
                            notifyRefCon: *const ::libc::c_void,
                            outClient: *mut MIDIClientRef) -> OSStatus;
    pub fn MIDIClientDispose(client: MIDIClientRef) -> OSStatus;
    pub fn MIDIInputPortCreate(client: MIDIClientRef,
                               portName: CoreFoundation_sys::CFStringRef,
                               readProc: MIDIReadProc,
                               refCon: *mut ::libc::c_void,
                               outPort: *mut MIDIPortRef) -> OSStatus;
    pub fn MIDIPortDispose(port: MIDIPortRef) -> OSStatus;
    pub fn MIDIPortConnectSource(port: MIDIPortRef, source: MIDIEndpointRef,
                                 connRefCon: *mut ::libc::c_void) -> OSStatus;
    pub fn MIDIGetNumberOfSources() -> ItemCount;
    pub fn MIDIGetSource(sourceIndex0: ItemCount) -> MIDIEndpointRef;
}
