use CoreFoundation_sys;

// utility function - step thru variable length midi packets

#[cfg(any(target_arch = "powerpc", target_arch = "x86_64", target_arch = "x86"))]
pub unsafe fn MIDIPacketNext(pkt: &MIDIPacket) -> &MIDIPacket
{
    use std::intrinsics::transmute;
    transmute(&(*pkt).data[(*pkt).length as usize])
}

#[cfg(any(target_arch = "arm", target_arch = "aarch64"))]
pub unsafe fn MIDIPacketNext(pkt: &MIDIPacket) -> &MIDIPacket
{
    // MIDIPacket must be 4-byte aligned
    use std::intrinsics::transmute;
    ((transmute::<_, usize>(&(*pkt).data[(*pkt).length as usize]) + 3) & !3) as *const MIDIPacket
}

/* automatically generated by rust-bindgen */

pub type UInt8 = ::libc::c_uchar;
pub type UInt16 = ::libc::c_ushort;
pub type UInt32 = ::libc::c_uint;
pub type SInt32 = ::libc::c_int;
pub type UInt64 = ::libc::c_ulonglong;
pub type OSStatus = SInt32;
pub type ItemCount = ::libc::c_ulong;

pub type Byte = UInt8;

pub type MIDIObjectRef = UInt32;
pub type MIDIClientRef = MIDIObjectRef;
pub type MIDIPortRef = MIDIObjectRef;
pub type MIDIEndpointRef = MIDIObjectRef;
pub type MIDITimeStamp = UInt64;
pub type MIDIPacketList = Struct_MIDIPacketList;
pub type MIDINotifyProc =
    ::std::option::Option<extern "C" fn(message: ::libc::c_void,
                                        refCon: ::libc::c_void) -> ()>;
pub type MIDINotifyBlock = ::libc::c_void;
pub type MIDIReadProc =
    ::std::option::Option<extern "C" fn(pktlist: *const MIDIPacketList,
                                        readProcRefCon: *mut ::libc::c_void,
                                        srcConnRefCon: *mut ::libc::c_void) -> ()>;
pub type MIDIReadBlock = ::libc::c_void;
pub type MIDICompletionProc =
    ::std::option::Option<extern "C" fn(request: ::libc::c_void) -> ()>;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_MIDIPacket {
    pub timeStamp: MIDITimeStamp,
    pub length: UInt16,
    pub data: [Byte; 256usize],
}
impl ::std::clone::Clone for Struct_MIDIPacket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIPacket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MIDIPacket = Struct_MIDIPacket;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_MIDIPacketList {
    pub numPackets: UInt32,
    pub packet: [MIDIPacket; 1usize],
}
impl ::std::clone::Clone for Struct_MIDIPacketList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_MIDIPacketList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "CoreMIDI", kind = "framework")]
extern "C" {
    pub fn MIDIClientCreate(name: CoreFoundation_sys::CFStringRef, notifyProc: MIDINotifyProc,
                            notifyRefCon: *const ::libc::c_void,
                            outClient: *mut MIDIClientRef) -> OSStatus;
    pub fn MIDIClientDispose(client: MIDIClientRef) -> OSStatus;
    pub fn MIDIInputPortCreate(client: MIDIClientRef,
                               portName: CoreFoundation_sys::CFStringRef,
                               readProc: MIDIReadProc,
                               refCon: *mut ::libc::c_void,
                               outPort: *mut MIDIPortRef) -> OSStatus;
    pub fn MIDIPortDispose(port: MIDIPortRef) -> OSStatus;
    pub fn MIDIPortConnectSource(port: MIDIPortRef, source: MIDIEndpointRef,
                                 connRefCon: *mut ::libc::c_void) -> OSStatus;
    pub fn MIDIGetNumberOfSources() -> ItemCount;
    pub fn MIDIGetSource(sourceIndex0: ItemCount) -> MIDIEndpointRef;
}
